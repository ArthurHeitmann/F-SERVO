// // AUTO GENERATED FILE, DO NOT EDIT.
// //
// // Generated by `package:ffigen`.
// // ignore_for_file: type=lint
// import 'dart:ffi' as ffi;

// class RustyPlatinumUtils {
//   /// Holds the symbol lookup function.
//   final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
//       _lookup;

//   /// The symbols are looked up in [dynamicLibrary].
//   RustyPlatinumUtils(ffi.DynamicLibrary dynamicLibrary)
//       : _lookup = dynamicLibrary.lookup;

//   /// The symbols are looked up with [lookup].
//   RustyPlatinumUtils.fromLookup(
//       ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
//           lookup)
//       : _lookup = lookup;

//   ffi.Pointer<ffi.Void> rpu_load_wmb(
//     ffi.Pointer<ffi.Char> wmb_path,
//   ) {
//     return _rpu_load_wmb(
//       wmb_path,
//     );
//   }

//   late final _rpu_load_wmbPtr = _lookup<
//       ffi.NativeFunction<
//           ffi.Pointer<ffi.Void> Function(
//               ffi.Pointer<ffi.Char>)>>('rpu_load_wmb');
//   late final _rpu_load_wmb = _rpu_load_wmbPtr
//       .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

//   ffi.Pointer<ffi.Void> rpu_new_context() {
//     return _rpu_new_context();
//   }

//   late final _rpu_new_contextPtr =
//       _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
//           'rpu_new_context');
//   late final _rpu_new_context =
//       _rpu_new_contextPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

//   ffi.Pointer<ffi.Void> rpu_new_renderer(
//     ffi.Pointer<ffi.Void> context,
//     int width,
//     int height,
//     ffi.Pointer<ffi.Void> scene_data,
//   ) {
//     return _rpu_new_renderer(
//       context,
//       width,
//       height,
//       scene_data,
//     );
//   }

//   late final _rpu_new_rendererPtr = _lookup<
//       ffi.NativeFunction<
//           ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Uint32,
//               ffi.Uint32, ffi.Pointer<ffi.Void>)>>('rpu_new_renderer');
//   late final _rpu_new_renderer = _rpu_new_rendererPtr.asFunction<
//       ffi.Pointer<ffi.Void> Function(
//           ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

//   void rpu_drop_renderer(
//     ffi.Pointer<ffi.Void> state,
//   ) {
//     return _rpu_drop_renderer(
//       state,
//     );
//   }

//   late final _rpu_drop_rendererPtr =
//       _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
//           'rpu_drop_renderer');
//   late final _rpu_drop_renderer =
//       _rpu_drop_rendererPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

//   int rpu_render(
//     ffi.Pointer<ffi.Void> state,
//     ffi.Pointer<ffi.Uint8> buffer,
//     int buffer_size,
//     int width,
//     int height,
//     double bg_r,
//     double bg_g,
//     double bg_b,
//     double bg_a,
//   ) {
//     return _rpu_render(
//       state,
//       buffer,
//       buffer_size,
//       width,
//       height,
//       bg_r,
//       bg_g,
//       bg_b,
//       bg_a,
//     );
//   }

//   late final _rpu_renderPtr = _lookup<
//       ffi.NativeFunction<
//           ffi.Int32 Function(
//               ffi.Pointer<ffi.Void>,
//               ffi.Pointer<ffi.Uint8>,
//               ffi.Size,
//               ffi.Uint32,
//               ffi.Uint32,
//               ffi.Float,
//               ffi.Float,
//               ffi.Float,
//               ffi.Float)>>('rpu_render');
//   late final _rpu_render = _rpu_renderPtr.asFunction<
//       int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint8>, int, int, int,
//           double, double, double, double)>();

//   void rpu_add_camera_rotation(
//     ffi.Pointer<ffi.Void> state,
//     double x,
//     double y,
//   ) {
//     return _rpu_add_camera_rotation(
//       state,
//       x,
//       y,
//     );
//   }

//   late final _rpu_add_camera_rotationPtr = _lookup<
//       ffi.NativeFunction<
//           ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float,
//               ffi.Float)>>('rpu_add_camera_rotation');
//   late final _rpu_add_camera_rotation = _rpu_add_camera_rotationPtr
//       .asFunction<void Function(ffi.Pointer<ffi.Void>, double, double)>();

//   void rpu_add_camera_offset(
//     ffi.Pointer<ffi.Void> state,
//     double x,
//     double y,
//   ) {
//     return _rpu_add_camera_offset(
//       state,
//       x,
//       y,
//     );
//   }

//   late final _rpu_add_camera_offsetPtr = _lookup<
//       ffi.NativeFunction<
//           ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float,
//               ffi.Float)>>('rpu_add_camera_offset');
//   late final _rpu_add_camera_offset = _rpu_add_camera_offsetPtr
//       .asFunction<void Function(ffi.Pointer<ffi.Void>, double, double)>();

//   void rpu_zoom_camera_by(
//     ffi.Pointer<ffi.Void> state,
//     double distance,
//   ) {
//     return _rpu_zoom_camera_by(
//       state,
//       distance,
//     );
//   }

//   late final _rpu_zoom_camera_byPtr = _lookup<
//           ffi
//           .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>>(
//       'rpu_zoom_camera_by');
//   late final _rpu_zoom_camera_by = _rpu_zoom_camera_byPtr
//       .asFunction<void Function(ffi.Pointer<ffi.Void>, double)>();

//   void rpu_auto_set_target(
//     ffi.Pointer<ffi.Void> state,
//   ) {
//     return _rpu_auto_set_target(
//       state,
//     );
//   }

//   late final _rpu_auto_set_targetPtr =
//       _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
//           'rpu_auto_set_target');
//   late final _rpu_auto_set_target = _rpu_auto_set_targetPtr
//       .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

//   void rpu_set_model_visibility(
//     ffi.Pointer<ffi.Void> state,
//     int model_id,
//     bool visibility,
//   ) {
//     return _rpu_set_model_visibility(
//       state,
//       model_id,
//       visibility,
//     );
//   }

//   late final _rpu_set_model_visibilityPtr = _lookup<
//       ffi.NativeFunction<
//           ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32,
//               ffi.Bool)>>('rpu_set_model_visibility');
//   late final _rpu_set_model_visibility = _rpu_set_model_visibilityPtr
//       .asFunction<void Function(ffi.Pointer<ffi.Void>, int, bool)>();

//   ffi.Pointer<ffi.Uint32> rpu_get_model_states(
//     ffi.Pointer<ffi.Void> state,
//   ) {
//     return _rpu_get_model_states(
//       state,
//     );
//   }

//   late final _rpu_get_model_statesPtr = _lookup<
//       ffi.NativeFunction<
//           ffi.Pointer<ffi.Uint32> Function(
//               ffi.Pointer<ffi.Void>)>>('rpu_get_model_states');
//   late final _rpu_get_model_states = _rpu_get_model_statesPtr
//       .asFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<ffi.Void>)>();
// }
